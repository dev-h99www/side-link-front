name: React-server CD

# 트리거를 수행할 브랜치를 지정합니다.
on:
  push:
    branches: [ main ]

# 환경설정
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/side-link-front
  VERSION: ${{ github.sha }}
  NAME: side-link-front
  BUILD_PATH: /home/runner/work/side-link-front/side-link-front

jobs:
  # 빌드 Job
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      # GitHub repository에서 checkout
      - uses: actions/checkout@v3

      # 체크아웃 후 루트 디렉토리 구조 확인
      - name: List root directory
        run: ls -al ${{ github.workspace }}

      # 프로젝트 디렉토리 구조 확인
      - name: List project directory
        run: ls -al ${{ env.BUILD_PATH }}

      # src 디렉토리와 index.js 파일 존재 여부 확인
      - name: List src directory
        run: ls -al ${{ env.BUILD_PATH }}/src

      # side-project 디렉토리 구조 확인
      - name: List side-project directory
        run: ls -al ${{ env.BUILD_PATH }}/src/side-project

      # Node.js 설정
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.15.0'
          
      # 프로젝트 의존성 설치 및 빌드
      - run: npm install
        working-directory: ${{ env.BUILD_PATH }}
        
      # NODE_PATH 설정 및 빌드 실행
      - run: NODE_PATH=src/side-project npm run build
        working-directory: ${{ env.BUILD_PATH }}

      # Docker build 수행
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # GitHub 컨테이너 레지스트리에 로그인 후 빌드 및 푸시
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest

  # 배포 Job
  deploy:
    needs: build  # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [ self-hosted, react-server ] # AWS ./configure에서 사용할 label명

    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # 3000 -> 80 포트로 수행하도록 지정
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 80:80 --name ${{ env.NAME }} --restart always ${{ env.DOCKER_IMAGE }}:latest
